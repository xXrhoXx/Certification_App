@page "/login"
<!--rendermode InteractiveServer //HARD NOTE TO SELF: do NOT use interactive server if you want your identity to work -->
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Forms
@using Models.Entities;
@using System.ComponentModel.DataAnnotations
@using PBL_Semester5_Aplikasi_Sertifikasi_v2.AccessorApp.Models.ViewModels
@using PBL_Semester5_Aplikasi_Sertifikasi_v2.AccessorApp.Service
@using System.Security.Claims
@inject NavigationManager NavigationManager;
<!--using Microsoft.AspNetCore.Components.Authorization
using Microsoft.AspNetCore.Authorization
inject AuthenticationStateProvider AuthStateProvider
inject NetcodeHub.Packages.Extensions.LocalStorage.ILocalStorageService localStorageService;
inject NetcodeHub.Packages.Extensions.SessionStorage.ISessionStorageService sessionStorageService;-->

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<div class="row">
    <div class="col offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@loginModel" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center">
                <img src="#" alt="Logo" style="max-height:5rem" />
                <h3>LOGIN</h3>
            </div>

            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="loginModel.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => loginModel.Username" />
            </div>

            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="() => loginModel.Email" />
            </div>

            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="loginModel.Password" class="form-control" placeholder="Password" type="password" />
                <ValidationMessage For="() => loginModel.Password" />
            </div>

            <div class="mb-3 text-center text-danger">
                @errorMessage
            </div>

            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>
<!--button class="btn btn-primary m-2" @onclick="SetData">Set Data</!button-->

@code {
    // Login Model
    [CascadingParameter]
    public HttpContext? httpContext { get; set; }

    [CascadingParameter]
    public HttpClient? httpClient { get; set; } = new HttpClient();

    [SupplyParameterFromForm]
    public LoginViewModel loginModel { get; set; } = new();

    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (httpContext.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/", true);
        }
    }

    private async Task Authenticate()
    {
        var loginRequest = new
        {
            username = loginModel.Username,
            email = loginModel.Email,
            password = loginModel.Password
        };

        // Make the POST request to the API
        var response = await httpClient!.PostAsJsonAsync($"http://localhost:5017/api/Accessor/validate", loginRequest);
        if (response.IsSuccessStatusCode)
        {
            // Successful authentication (e.g., you can set a token or redirect)
            Accessor accessor = await response.Content.ReadFromJsonAsync<Accessor>();

            //await localStorageService.SaveAsStringAsync("name", accessor.Nama);
            //await localStorageService.SaveAsStringAsync("email", accessor.Email);
            //await localStorageService.SaveAsStringAsync("id", accessor.Id.ToString());

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, accessor.Nama),
                new Claim("Id", accessor.Id.ToString()),
                new Claim(ClaimTypes.Email, accessor.Email)
            };

            // Mark the user as authenticated
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
            await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);

            // Example: If authentication is successful, redirect to a dashboard or store token
            // Example: Store token or user details (optional)
            NavigationManager.NavigateTo("/");
        }
        else
        {
            // If authentication fails, show the error message from the API
            errorMessage = "Invalid username, email, or password.";
        }
    }

    // Login Model Class
    private class LoginModel
        {
        [Required(AllowEmptyStrings = false, ErrorMessage = "Username is required.")]
        public string Username { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid Email Address.")]
        public string Email { get; set; }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; }
    }
}
