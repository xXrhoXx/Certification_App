@using MauiAccessorApp.Models.Entities
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager;

@if (pertanyaan is not null)
{
    <tr>
        @if (!OnEdit)
        {
            <!--td>@pertanyaan.Id</td-->
            <!--td>@index</td>
            <td>@pertanyaan.Text</td>
            <td>
                <button class="btn btn-primary" @onclick="EnableEdit">Enable Edit</button>
                <button class="btn btn-danger" @onclick="Delete">Delete</button>
            </td-->
            <td style="width: 5%; text-align: center;">@index</td>
            <!--td style="width: 70%;">@pertanyaan.text</td-->
            <td style="width: 70%;">
                @foreach (var line in pertanyaan.text.Split('\n'))
                {
                    <div>@line<br /></div>
                }
            </td>
            <td style="width: 25%; text-align: center;">
                <button class="btn btn-primary" @onclick="EnableEdit">Enable Edit</button>
                <button class="btn btn-danger" @onclick="Delete">Delete</button>
            </td>
        }
        else
        {
            <td></td>
            <td>
                <!--input @bind="pertanyaan.text" class="form-control form-control-lg" style="font-size: 1rem; height: 2.5rem;" /-->
                <textarea @bind="pertanyaan.text" class="form-control form-control-lg"
                          style="font-size: 1rem; height: 5rem; width: 100%;"></textarea>
            </td>
            <td>
                <button class="btn btn-success" @onclick="Update" >Save Changes</button>
                <button class="btn btn-secondary" @onclick="DisableEdit">Cancel</button>
            </td>
        }
    </tr>
}

@code {
    [Parameter]
    public int index { get; set; }

    [Parameter]
    public Pertanyaan pertanyaan { get; set; }

    [Parameter]
    public bool OnEdit { get; set; }

    public HttpClient httpClient = new HttpClient();


    private async Task EnableEdit()
    {
        OnEdit = true;
    }

    private async Task DisableEdit()
    {
        OnEdit = false;
    }

    private async Task Update()
    {
        var response = await httpClient!.PutAsJsonAsync<Pertanyaan>($"http://localhost:5017/api/Pertanyaan", pertanyaan);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); // Reload the page
    }

    private async Task Delete()
    {
        // Trigger a JavaScript confirmation dialog
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");

        if (confirmed)
        {
            // Call the Delete method if confirmed
            var response = await httpClient.DeleteAsync($"http://localhost:5017/api/Pertanyaan/{pertanyaan.id}");
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); // Reload the page
        }
    }
}
