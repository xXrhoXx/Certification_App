@page "/weather"
@using Models.Entities
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Linq
@using Newtonsoft.Json
@inject IJSRuntime js;
@inject NavigationManager Navigation
@rendermode InteractiveServer
@attribute [Authorize]

<!-- Include Bootstrap -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
<PageTitle>Answered Questions</PageTitle>

<h1>Answered Questions</h1>

@if (entitasJawabanPesertaAssessis != null && entitasJawabanPesertaAssessis.Any())
{
    @foreach (var item in entitasJawabanPesertaAssessis)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID SOAL</th>
                    <th>NAMA ASSESSI</th>
                    <th>NAMA ASSESSOR</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@item.idSoal</td>
                    <td>@item.namaPesertaAssesi</td>
                    <td>@item.namaAssesor</td>
                </tr>
                <button class="btn btn-primary" @onclick="DownloadFile">Download File</button>
                <DaftarJawabanPesertaAssessiItemComponent 
                    jawaban="@item.daftarJawabanPesertaAssessi" 
                    pertanyaan="@item.daftarPertanyaanPesertaAssessi"/>
            </tbody>
        </table>
    }
}
else
{
    <p>No data available</p>
}
@code {
    private string fileName = string.Empty; // Holds the name of the file to download
    private string statusMessage = string.Empty;

    private async Task DownloadFile()
    {
        fileName = Path.GetFileName(jawabanPesertaAssesi[0].filePath);

        if (string.IsNullOrWhiteSpace(fileName))
        {
            statusMessage = "Please enter a file name.";
            return;
        }

        try
        {
            // Construct the file download URL
            //string downloadUrl = $"{Navigation.BaseUri}download-file?fileName={Uri.EscapeDataString(fileName)}";
            string downloadUrl = $"http://localhost:5017/api/Jawaban/download-file?fileName={Uri.EscapeDataString(fileName)}";

            // Navigate to the file download URL (this triggers the browser to download the file)
            Navigation.NavigateTo(downloadUrl, forceLoad: true);

            statusMessage = "Download started...";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
    }
}
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public List<Jawaban> jawabanPesertaAssesi = new List<Jawaban>();
    public List<EntitasJawabanPesertaAssessi> entitasJawabanPesertaAssessis = new List<EntitasJawabanPesertaAssessi>();
    public HttpClient httpClient = new HttpClient();
    public string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authenticationState = await authenticationStateTask;

        var response = await httpClient!.GetAsync($"http://localhost:5017/api/Jawaban/by-accessor/{authenticationState.User.FindFirst("Id")?.Value}");

        if (response.IsSuccessStatusCode)
        {
            jawabanPesertaAssesi = await response.Content.ReadFromJsonAsync<List<Jawaban>>();

            entitasJawabanPesertaAssessis = jawabanPesertaAssesi
                .GroupBy(x => new { x.questionsId, x.accessedId, x.accessorId })
                .Select(group => new EntitasJawabanPesertaAssessi
                    {
                        idSoal = group.Key.questionsId,
                        idPesertaAssessi = group.Key.accessedId,
                        idAssessor = group.Key.accessorId,
                        daftarJawabanPesertaAssessi = group.Select(answer => new Jawaban
                        {
                            id = answer.id,
                            assessmentAnswer = answer.assessmentAnswer,
                            questionId = answer.questionId
                        }).ToList(),
                    })
            .ToList();

            foreach (var item in entitasJawabanPesertaAssessis)
            {
                item.namaPesertaAssesi = await GetNamaPesertaByIdAsync(item.idPesertaAssessi);
                item.namaAssesor = await GetNamaAssessorByIdAsync(item.idAssessor);

                foreach (var jawabanpeserta in item.daftarJawabanPesertaAssessi)
                {
                    jawabanpeserta.accessedId = item.idPesertaAssessi;
                    jawabanpeserta.accessorId = item.idAssessor;
                    jawabanpeserta.questionsId = item.idSoal;

                    /*Console.WriteLine(
                        jawabanpeserta.id + " " + 
                        jawabanpeserta.assessmentAnswer + " " + 
                        jawabanpeserta.accessedId + " " + 
                        jawabanpeserta.accessorId + " " + 
                        jawabanpeserta.questionsId + " " +
                        jawabanpeserta.questionId + "\n");*/
                }
            }
        }
        else
        {
            // Handle the case where the response is not successful
            // You can log the error, display a message to the user, or any other logic you need.
            Console.WriteLine($"Error: {response.StatusCode}");
            // Example: Show an error message to the user or set a default value for pertanyaan
            jawabanPesertaAssesi = new List<Jawaban>();
            entitasJawabanPesertaAssessis = new List<EntitasJawabanPesertaAssessi>();
        }
    }

    private async Task<string> GetNamaPesertaByIdAsync(int id)
    {
        string namaPeserta = string.Empty;

        try
        {
            var response = await httpClient!.GetAsync($"http://localhost:5017/api/Accessed/{id}");
            if (response.IsSuccessStatusCode)
            {
                var assessor = await response.Content.ReadFromJsonAsync<Accessed>();
                if (assessor != null)
                {
                    // Assuming Pertanyaan has a property for the participant's name
                    namaPeserta = assessor.Nama ?? "Unknown Participant";
                }
            }
            else
            {
                // Log or handle the error
                Console.WriteLine($"Error: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions such as network errors
            Console.WriteLine($"Exception: {ex.Message}");
        }

        return namaPeserta;
    }
    private async Task<string> GetNamaAssessorByIdAsync(int id)
    {
        string namaAssessor = string.Empty;

        try
        {
            var response = await httpClient!.GetAsync($"http://localhost:5017/api/Accessor/{id}");
            if (response.IsSuccessStatusCode)
            {
                var peserta = await response.Content.ReadFromJsonAsync<Accessor>();
                if (peserta != null)
                {
                    // Assuming Pertanyaan has a property for the participant's name
                    namaAssessor = peserta.Nama ?? "Unknown Participant";
                }
            }
            else
            {
                // Log or handle the error
                Console.WriteLine($"Error: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions such as network errors
            Console.WriteLine($"Exception: {ex.Message}");
        }

        return namaAssessor;
    }
}
